//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Named Structures

#pragma mark -

//
// File: SimulatorHost.framework/Versions/A/SimulatorHost
// UUID: A7FA5C5A-F2FB-3C37-B03E-0EB8C494214D
//
//                           Arch: x86_64
//                Current version: 463.9.41
//          Compatibility version: 1.0.0
//                 Source version: 463.9.41.0.0
//       Minimum Mac OS X version: 10.8.0
//                    SDK version: 10.8.0
//
// Objective-C Garbage Collection: Unsupported
//

@interface ISHDeviceVersions : NSObject
{
    BOOL _allowOther;
    NSMutableDictionary *_deviceMap;
    NSMutableDictionary *_versionMap;
    NSString *_sdksDirectoryPath;
}

+ (id)sharedInstance;
@property BOOL allowOther; // @synthesize allowOther=_allowOther;
@property(copy) NSString *sdksDirectoryPath; // @synthesize sdksDirectoryPath=_sdksDirectoryPath;
@property(retain) NSMutableDictionary *versionMap; // @synthesize versionMap=_versionMap;
@property(retain) NSMutableDictionary *deviceMap; // @synthesize deviceMap=_deviceMap;
- (id)versionForSDKPath:(id)arg1;
- (id)sdkPathForVersion:(id)arg1;
- (id)sdkFromVersionString:(id)arg1;
- (id)sdkFromSDKRoot:(id)arg1;
- (id)latestSDKRoot;
- (id)deviceInfoForProductType:(int)arg1 displayScale:(float)arg2 displayHeight:(float)arg3 wordSize:(unsigned int)arg4;
- (id)shortVersionStringForSDKRoot:(id)arg1;
- (id)allSDKs;
- (id)allSDKRoots;
- (id)allVersionNames;
- (id)deviceInfoNamed:(id)arg1;
- (id)allDeviceObjects;
- (id)allDeviceNames;
- (id)knownArches;
- (id)knownScreenHeights;
- (id)knownScales;
- (id)productTypes;
- (id)deviceAndVersionInfo;
- (void)createVersionMap;
- (void)loadDevicesAtPath:(id)arg1;
- (BOOL)versionsValid;
- (BOOL)devicesValid;
- (void)createDeviceMap;
- (id)bundle;
- (void)dealloc;
- (id)init;

@end

@interface ISHExternalDisplayInfo : NSObject
{
    NSString *_identifier;
    NSString *_displayName;
    double _width;
    double _height;
    NSString *_groupIdentifier;
    NSString *_minimumSDK;
    NSString *_maximumSDK;
}

@property(copy) NSString *maximumSDK; // @synthesize maximumSDK=_maximumSDK;
@property(copy) NSString *minimumSDK; // @synthesize minimumSDK=_minimumSDK;
@property(copy) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property double height; // @synthesize height=_height;
@property double width; // @synthesize width=_width;
@property(copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
- (id)description;
- (struct CGSize)size;

@end

@interface ISHProfiles : NSObject
{
}

+ (id)defaultProfiles;
@property(readonly) NSArray *externalScreens;
@property(readonly) NSArray *devices;

@end

@interface ISHSDKInfo : NSObject
{
    BOOL _usesLegacyPathInfoStruct;
    BOOL _usesLegacyPurpleTouchEvents;
    BOOL _requiresAppMapRebuild;
    BOOL _supportsHIDButtons;
    BOOL _supportsCloud;
    BOOL _supportsBootstrapSubset;
    BOOL _supportsLaunchdSim;
    BOOL _supportsStandaloneLog;
    BOOL _supportsVisualQualityToggle;
    BOOL _supportsCar;
    BOOL _supportsLP64;
    BOOL _isComplete;
    unsigned int _version;
    NSString *_root;
    NSString *_shortVersionString;
    NSString *_fullVersionString;
    void *_libLaunchHostHandle;
    NSString *_nameOfSpringBoardService;
    NSString *_nameOfSystemAppService;
    NSString *_nameOfWorkspaceService;
    NSDictionary *_requiredHostServices;
}

@property(readonly) NSDictionary *requiredHostServices; // @synthesize requiredHostServices=_requiredHostServices;
@property(readonly) NSString *nameOfWorkspaceService; // @synthesize nameOfWorkspaceService=_nameOfWorkspaceService;
@property(readonly) NSString *nameOfSystemAppService; // @synthesize nameOfSystemAppService=_nameOfSystemAppService;
@property(readonly) NSString *nameOfSpringBoardService; // @synthesize nameOfSpringBoardService=_nameOfSpringBoardService;
@property(readonly) BOOL isComplete; // @synthesize isComplete=_isComplete;
@property(readonly) BOOL supportsLP64; // @synthesize supportsLP64=_supportsLP64;
@property(readonly) BOOL supportsCar; // @synthesize supportsCar=_supportsCar;
@property(readonly) BOOL supportsVisualQualityToggle; // @synthesize supportsVisualQualityToggle=_supportsVisualQualityToggle;
@property(readonly) BOOL supportsStandaloneLog; // @synthesize supportsStandaloneLog=_supportsStandaloneLog;
@property(readonly) BOOL supportsLaunchdSim; // @synthesize supportsLaunchdSim=_supportsLaunchdSim;
@property(readonly) BOOL supportsBootstrapSubset; // @synthesize supportsBootstrapSubset=_supportsBootstrapSubset;
@property(readonly) BOOL supportsCloud; // @synthesize supportsCloud=_supportsCloud;
@property(readonly) BOOL supportsHIDButtons; // @synthesize supportsHIDButtons=_supportsHIDButtons;
@property(readonly) BOOL requiresAppMapRebuild; // @synthesize requiresAppMapRebuild=_requiresAppMapRebuild;
@property(readonly) BOOL usesLegacyPurpleTouchEvents; // @synthesize usesLegacyPurpleTouchEvents=_usesLegacyPurpleTouchEvents;
@property(readonly) BOOL usesLegacyPathInfoStruct; // @synthesize usesLegacyPathInfoStruct=_usesLegacyPathInfoStruct;
@property(readonly) void *libLaunchHostHandle; // @synthesize libLaunchHostHandle=_libLaunchHostHandle;
@property(copy) NSString *fullVersionString; // @synthesize fullVersionString=_fullVersionString;
@property(copy) NSString *shortVersionString; // @synthesize shortVersionString=_shortVersionString;
@property(readonly) unsigned int version; // @synthesize version=_version;
@property(copy) NSString *root; // @synthesize root=_root;
- (void)dealloc;
- (id)initWithRoot:(id)arg1;

@end

@interface ISHDeviceInfo : NSObject
{
    BOOL _canTether;
    BOOL _invertX;
    BOOL _invertY;
    BOOL _transformedTouch;
    BOOL _rotateScreen180;
    BOOL _lp64;
    unsigned int _minimumVersion;
    unsigned int _maximumVersion;
    int _productType;
    NSString *_identifier;
    NSString *_displayName;
    double _scale;
    NSString *_productFamily;
    NSString *_bundlePath;
    NSString *_capabilitiesPlist;
    long long _priority;
    NSString *_chromeImageName;
    NSImage *_chromeImage;
    NSString *_homeImageName;
    NSImage *_homeImage;
    NSString *_chromeImageNameDoubled;
    NSImage *_chromeImageDoubled;
    NSString *_homeImageNameDoubled;
    NSImage *_homeImageDoubled;
    NSString *_productClass;
    NSString *_deviceBundle;
    NSString *_devicePitch;
    NSString *_executablePath;
    NSString *_olderEquivalentName;
    NSString *_newerEquivalentName;
    NSArray *_additionalArguments;
    NSDictionary *_additionalEnvironment;
    struct CGSize _size;
    struct CGSize _forceSize;
    struct CGPoint _homeOrigin;
    struct CGPoint _homeOriginDoubled;
}

+ (id)deviceWithPath:(id)arg1;
+ (id)device;
@property(copy) NSDictionary *additionalEnvironment; // @synthesize additionalEnvironment=_additionalEnvironment;
@property(copy) NSArray *additionalArguments; // @synthesize additionalArguments=_additionalArguments;
@property(copy) NSString *newerEquivalentName; // @synthesize newerEquivalentName=_newerEquivalentName;
@property(copy) NSString *olderEquivalentName; // @synthesize olderEquivalentName=_olderEquivalentName;
@property(copy) NSString *executablePath; // @synthesize executablePath=_executablePath;
@property(copy) NSString *devicePitch; // @synthesize devicePitch=_devicePitch;
@property(copy) NSString *deviceBundle; // @synthesize deviceBundle=_deviceBundle;
@property(copy) NSString *productClass; // @synthesize productClass=_productClass;
@property int productType; // @synthesize productType=_productType;
@property struct CGPoint homeOriginDoubled; // @synthesize homeOriginDoubled=_homeOriginDoubled;
@property struct CGPoint homeOrigin; // @synthesize homeOrigin=_homeOrigin;
@property(retain, nonatomic) NSImage *homeImageDoubled; // @synthesize homeImageDoubled=_homeImageDoubled;
@property(copy) NSString *homeImageNameDoubled; // @synthesize homeImageNameDoubled=_homeImageNameDoubled;
@property(retain, nonatomic) NSImage *chromeImageDoubled; // @synthesize chromeImageDoubled=_chromeImageDoubled;
@property(copy) NSString *chromeImageNameDoubled; // @synthesize chromeImageNameDoubled=_chromeImageNameDoubled;
@property(retain, nonatomic) NSImage *homeImage; // @synthesize homeImage=_homeImage;
@property(copy) NSString *homeImageName; // @synthesize homeImageName=_homeImageName;
@property(retain, nonatomic) NSImage *chromeImage; // @synthesize chromeImage=_chromeImage;
@property(copy) NSString *chromeImageName; // @synthesize chromeImageName=_chromeImageName;
@property BOOL lp64; // @synthesize lp64=_lp64;
@property long long priority; // @synthesize priority=_priority;
@property BOOL rotateScreen180; // @synthesize rotateScreen180=_rotateScreen180;
@property BOOL transformedTouch; // @synthesize transformedTouch=_transformedTouch;
@property BOOL invertY; // @synthesize invertY=_invertY;
@property BOOL invertX; // @synthesize invertX=_invertX;
@property BOOL canTether; // @synthesize canTether=_canTether;
@property struct CGSize forceSize; // @synthesize forceSize=_forceSize;
@property(copy) NSString *capabilitiesPlist; // @synthesize capabilitiesPlist=_capabilitiesPlist;
@property(copy) NSString *bundlePath; // @synthesize bundlePath=_bundlePath;
@property unsigned int maximumVersion; // @synthesize maximumVersion=_maximumVersion;
@property unsigned int minimumVersion; // @synthesize minimumVersion=_minimumVersion;
@property struct CGSize size; // @synthesize size=_size;
@property(copy) NSString *productFamily; // @synthesize productFamily=_productFamily;
@property double scale; // @synthesize scale=_scale;
@property(copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSString *description;
@property(readonly) NSSet *supportedArchitectures;
@property(readonly) NSString *architecture;
@property(readonly) double dotPitch;
@property(readonly) NSString *maximumSDK;
@property(readonly) NSString *minimumSDK;
- (id)imageWithName:(id)arg1;
- (struct CGPoint)forceOrigin;
- (BOOL)isForcingSize;
- (double)pointHeight;
- (id)newerEquivalent;
- (id)olderEquivalent;
- (BOOL)supportsSDK:(id)arg1;
- (long long)priorityCompare:(id)arg1;
- (void)dealloc;
- (id)init;

@end

